<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on goose.icu</title>
    <link>/post/</link>
    <description>Recent content in Posts on goose.icu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing Shadow</title>
      <link>/introducing-shadow/</link>
      <pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/introducing-shadow/</guid>
      <description>So I started making a browser engine (for fun) a few days ago, it felt kind of inevitable after starting a JS engine, so here we are. Here&amp;rsquo;s a short rundown. Source code too!
Try it in your browser! Screenshot of Shadow&amp;rsquo;s welcome page running inside Shadow (as of writing) What? A browser(/web) engine essentially takes in a URL(/etc) and gives you it rendered into a window for you to view and interact with.</description>
    </item>
    
    <item>
      <title>Mozilla Chronicles #1</title>
      <link>/mozilla-chronicles-1/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/mozilla-chronicles-1/</guid>
      <description>&amp;hellip;or I guess day 13 if you include weekends? (I don&amp;rsquo;t even watch big brother.) You can tell this is informal, right? And entirely my own opinions ;)
Work I&amp;rsquo;ve been doing Implemented and shipped the User Activation API in my first week! Almost done lazy loading iframes now too. Patch is submitted for review as of writing. Landing that and shipping next week, probably. Rambling Headlines Subtly sacrificing anonymity and/or privacy: My real name is now obviously tied to my username in some (work) places online publicly, and I&amp;rsquo;m okay with it.</description>
    </item>
    
    <item>
      <title>Joining Mozilla</title>
      <link>/joining-mozilla/</link>
      <pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/joining-mozilla/</guid>
      <description>Hey! Big news first: I join Mozilla on October 1st to work on Firefox full-time! Specifically a software engineer on the DOM Core team. I am extremely excited to work on the web platform full-time. This post covers the basics of who and how. If you have any questions feel free to DM me. (Good luck job hunters!)
Who I go by CanadaHonk (I prefer not to share my full name publicly/obviously online).</description>
    </item>
    
    <item>
      <title>Discord 0-click XSS to RCE (2022)</title>
      <link>/discord-0click-xss-to-rce/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/discord-0click-xss-to-rce/</guid>
      <description>Discord&amp;rsquo;s IPC Allowlist Discord expose a wrapped version of ipcRenderer for security, see my 1-click Discord XSS to RCE for more details on Electron&amp;rsquo;s IPC. It&amp;rsquo;s implemented with a Set:
const discordPrefixRegex = /^DISCORD_/; function getDiscordIPCEvent(ev) { return discordPrefixRegex.test(ev) ? ev : `DISCORD_${ev}`; } const RENDERER_IPC_SEND_WHITELIST = new Set([ /* ... */ ]); function send(ev, ...args) { const prefixedEvent = getDiscordIPCEvent(ev); if (!RENDERER_IPC_SEND_WHITELIST.has(prefixedEvent)) { throw new Error(&amp;#39;cannot send this event&amp;#39;); } ipcRenderer.</description>
    </item>
    
    <item>
      <title>Discord 1-click XSS to RCE (2020)</title>
      <link>/discord-1click-xss-to-rce/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/discord-1click-xss-to-rce/</guid>
      <description>Electron Isolation Overview Discord&amp;rsquo;s desktop app is made with Electron. The (modern) Electron security model focuses on having the browser sandbox, the renderer process, and the main process. each are isolated from each other as separate processes so require some interface to communicate, like so:
main world (scripts inside the site) ↑ | | contextBridge | | ↓ isolated world (limited node as preload) ↑ ipcMain | | | | ipcRenderer ↓ main process (node) ipcMain and ipcRenderer are event-based ways to communicate between the renderer and main process.</description>
    </item>
    
  </channel>
</rss>
